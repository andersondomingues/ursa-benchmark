TARGET   = forloop

TARGET_ARCH=riscv32
SIM_PATH=/home/ale/repos/riscv/RISC-V-TLM
SIM=$(SIM_PATH)/RISCV_TLM

CC       = riscv64-unknown-elf-gcc
# compiling flags here
#CFLAGS = -Wall -I. -O0 -nostartfiles  -march=rv32i -mabi=ilp32
#CFLAGS = -Wall -I. -O0 -nodefaultlibs -march=rv32i -mabi=ilp32
CFLAGS = -DSYSTEMC -Wall -I. -Os -nostdlib -march=rv32i -mabi=ilp32 --entry main


LINKER   = riscv64-unknown-linux-gnu-gcc
# linking flags here
LFLAGS   = -I. --entry main
LIBS   = $(EXTRA_LIBS)


# change these to proper directories where each file should be
SRCDIR   = ../../src
OBJDIR   = .
BINDIR   = ./
INCDIR = -I.
LIBDIR = -L.


#SOURCES  := $(wildcard $(SRCDIR)/*.c)
#INCLUDES := $(wildcard $(INCDIR)/*.h)
#OBJECTS  := $(SOURCES:$(SRCDIR)/%.c=$(OBJDIR)/%.o)
SOURCES  := $(SRCDIR)/$(TARGET).c
INCLUDES := 
OBJECTS  := $(TARGET).o

rm       = rm -f


$(BINDIR)/$(TARGET): $(OBJECTS)
	$(CC) $(OBJECTS) $(LFLAGS) -march=rv32i -mabi=ilp32   $(LIBS) $(LIBDIR) -o $(TARGET).elf
	riscv64-unknown-elf-objcopy -Oihex $(TARGET).elf $(TARGET).hex
	riscv64-unknown-elf-objcopy -O binary $(TARGET).elf $(TARGET).bin
#	@echo "Linking complete!"

$(OBJECTS): $(OBJDIR)/%.o : $(SRCDIR)/%.c
	@echo "Compiling "$<" ..."
#	$(CC) $(CFLAGS) $(INCDIR) -c $< -o $@
	$(CC) $(CFLAGS) $(INCDIR) $< -o $@
	@echo "Done!"

.PHONY: clean
clean:
	@$(rm) $(OBJECTS) *.elf *.hex *.bin $(TARGET)
	@echo "Cleanup complete!"

.PHONY: remove
remove: clean
	@$(rm) $(BINDIR)/$(TARGET)
	@echo "Executable removed!"

sim: $(BINDIR)/$(TARGET)
	$(SIM) $(TARGET).hex
